import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { VideoPlayer } from "@/components/youtube/VideoPlayer";
import { VideoCard } from "@/components/youtube/VideoCard";
import { NoteEditor } from "@/components/notes/NoteEditor";
import { NoteCard } from "@/components/notes/NoteCard";
import { ChatInput } from "@/components/chat/ChatInput";
import { ChatMessage } from "@/components/chat/ChatMessage";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Message } from "@/types/chat";
import { Note } from "@/types/note";
import { MessageSquare, FileText as NoteIcon, Video } from "lucide-react";
import { parseYoutubeUrl } from "@/utils/youtube";
import { ResourceType } from "@/types/youtube";
import { getVideoMetadata, saveVideoMetadata, saveNote, getNotesByResourceId, saveChat, getChatsByResourceId } from "@/utils/storage";
import { v4 as uuidv4 } from "uuid";
import { createTimestamp } from "@/utils/youtube";

// Mock video data for initial UI rendering
const mockVideoData = {
  id: "",
  title: "Sample Video Title",
  channelTitle: "Sample Channel",
  channelId: "",
  description: "This is a sample video description.",
  publishedAt: new Date().toISOString(),
  thumbnailUrl: "",
  duration: "10:30",
  viewCount: "1,000",
};

export default function VideoView() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [videoId, setVideoId] = useState(id || "");
  const [currentTime, setCurrentTime] = useState(0);
  const [videoData, setVideoData] = useState(mockVideoData);
  const [isCreatingNote, setIsCreatingNote] = useState(false);
  const [notes, setNotes] = useState<Note[]>([]);
  const [activeTab, setActiveTab] = useState("chat");
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  // Load video data and notes
  useEffect(() => {
    if (!videoId) {
      navigate("/");
      return;
    }

    // Load video metadata from storage
    const storedVideo = getVideoMetadata(videoId);
    if (storedVideo) {
      setVideoData(storedVideo);
    } else {
      // If no stored metadata, use a placeholder with the correct ID
      setVideoData({
        ...mockVideoData,
        id: videoId,
        thumbnailUrl: `https://i.ytimg.com/vi/${videoId}/hqdefault.jpg`,
      });
      
      // In a real app, we would fetch the metadata from YouTube API
      // and save it to storage
    }

    // Load notes for this video
    const videoNotes = getNotesByResourceId(videoId);
    setNotes(videoNotes);

    // Load chat history for this video
    const videoChats = getChatsByResourceId(videoId);
    if (videoChats.length > 0) {
      // Use the most recent chat
      const latestChat = videoChats.sort((a, b) => b.updatedAt - a.updatedAt)[0];
      setMessages(latestChat.messages);
    }
  }, [videoId, navigate]);

  const handleSendMessage = (content: string) => {
    const userMessage: Message = {
      id: uuidv4(),
      content,
      role: "user",
      timestamp: Date.now(),
      videoTimestamp: createTimestamp(currentTime),
    };

    const updatedMessages = [...messages, userMessage];
    setMessages(updatedMessages);
    setIsLoading(true);

    // Simulate AI response
    setTimeout(() => {
      const aiMessage: Message = {
        id: uuidv4(),
        content: "This is a simulated AI response. In a real app, this would be generated by an AI service like OpenAI or Anthropic.",
        role: "assistant",
        timestamp: Date.now(),
      };
      
      const newMessages = [...updatedMessages, aiMessage];
      setMessages(newMessages);
      setIsLoading(false);

      // Save chat to storage
      const chat = getChatsByResourceId(videoId)[0] || {
        id: uuidv4(),
        resourceId: videoId,
        messages: [],
        title: `Chat about ${videoData.title}`,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      };

      saveChat({
        ...chat,
        messages: newMessages,
        updatedAt: Date.now(),
      });
    }, 1500);
  };

  const handleSaveNote = ({ title, content, videoTimestamp }: { 
    title: string;
    content: string;
    videoTimestamp?: { seconds: number; formatted: string };
  }) => {
    const newNote: Note = {
      id: uuidv4(),
      resourceId: videoId,
      title,
      content,
      tags: [],
      createdAt: Date.now(),
      updatedAt: Date.now(),
      videoTimestamp,
    };

    saveNote(newNote);
    setNotes([...notes, newNote]);
    setIsCreatingNote(false);
  };

  const handleDeleteNote = (noteId: string) => {
    setNotes(notes.filter((note) => note.id !== noteId));
    // In a real app, we would also delete from storage
  };

  const handleTimestampClick = (seconds: number) => {
    // This would seek the video to the specified timestamp
    console.log(`Seeking to ${seconds} seconds`);
  };

  return (
    <div className="container py-6 px-4 sm:px-6">
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Video Player Section */}
        <div className="lg:col-span-2 space-y-4">
          <VideoPlayer
            videoId={videoId}
            onTimeUpdate={setCurrentTime}
            onReady={() => console.log("Video ready")}
          />
          
          <div>
            <h2 className="text-2xl font-bold tracking-tight">{videoData.title}</h2>
            <div className="flex items-center justify-between mt-2">
              <p className="text-sm text-muted-foreground">{videoData.channelTitle}</p>
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  <Video className="h-4 w-4 mr-1" />
                  Download
                </Button>
                <Button variant="outline" size="sm" onClick={() => setIsCreatingNote(true)}>
                  <NoteIcon className="h-4 w-4 mr-1" />
                  Take Note
                </Button>
              </div>
            </div>
          </div>

          {/* Create Note Form */}
          {isCreatingNote && (
            <div className="p-4 border rounded-lg bg-card">
              <h3 className="text-lg font-medium mb-2">Create a Note</h3>
              <NoteEditor
                currentVideoTime={currentTime}
                onSave={handleSaveNote}
                onCancel={() => setIsCreatingNote(false)}
              />
            </div>
          )}

          <Separator className="my-6" />

          {/* Video Description */}
          <div>
            <h3 className="text-lg font-medium mb-2">Description</h3>
            <p className="text-sm text-muted-foreground whitespace-pre-wrap">
              {videoData.description}
            </p>
          </div>
        </div>

        {/* Tabs for Chat and Notes */}
        <div className="h-[calc(100vh-16rem)] flex flex-col">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="chat" className="flex items-center gap-1">
                <MessageSquare className="h-4 w-4" />
                <span>Chat</span>
              </TabsTrigger>
              <TabsTrigger value="notes" className="flex items-center gap-1">
                <NoteIcon className="h-4 w-4" />
                <span>Notes</span>
              </TabsTrigger>
            </TabsList>
            
            {/* Chat Tab */}
            <TabsContent value="chat" className="flex-1 flex flex-col overflow-hidden">
              <div className="flex-1 overflow-y-auto">
                {messages.length === 0 ? (
                  <div className="h-full flex flex-col items-center justify-center p-6 text-center">
                    <MessageSquare className="h-12 w-12 text-muted-foreground mb-2" />
                    <h3 className="text-lg font-medium">No messages yet</h3>
                    <p className="text-sm text-muted-foreground mt-1">
                      Start a conversation about this video with our AI assistant.
                    </p>
                  </div>
                ) : (
                  <div className="divide-y">
                    {messages.map((message) => (
                      <ChatMessage 
                        key={message.id} 
                        message={message} 
                        onTimestampClick={message.videoTimestamp ? () => handleTimestampClick(message.videoTimestamp!.seconds) : undefined}
                      />
                    ))}
                  </div>
                )}
              </div>
              
              <div className="p-4 mt-auto">
                <ChatInput 
                  onSend={handleSendMessage} 
                  isLoading={isLoading}
                  placeholder="Ask about this video..."
                />
              </div>
            </TabsContent>
            
            {/* Notes Tab */}
            <TabsContent value="notes" className="flex-1 flex flex-col overflow-hidden">
              <div className="p-4 flex justify-between items-center">
                <h3 className="font-medium">Your Notes</h3>
                <Button size="sm" onClick={() => setIsCreatingNote(true)}>
                  New Note
                </Button>
              </div>
              
              <div className="flex-1 overflow-y-auto p-4 pt-0 space-y-3">
                {notes.length === 0 ? (
                  <div className="h-full flex flex-col items-center justify-center p-6 text-center">
                    <NoteIcon className="h-12 w-12 text-muted-foreground mb-2" />
                    <h3 className="text-lg font-medium">No notes yet</h3>
                    <p className="text-sm text-muted-foreground mt-1">
                      Create notes to save important information from this video.
                    </p>
                  </div>
                ) : (
                  notes.map((note) => (
                    <NoteCard
                      key={note.id}
                      note={note}
                      onDelete={() => handleDeleteNote(note.id)}
                      onTimestampClick={note.videoTimestamp ? () => handleTimestampClick(note.videoTimestamp!.seconds) : undefined}
                    />
                  ))
                )}
              </div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}
