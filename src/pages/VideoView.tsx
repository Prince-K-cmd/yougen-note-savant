
import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { Message } from "@/types/chat";
import { Note } from "@/types/note";
import { ResourceType } from "@/types/youtube";
import { v4 as uuidv4 } from "uuid";

import { createTimestamp } from "@/utils/youtube";
import { 
  getVideoMetadata, 
  saveVideoMetadata, 
  saveNote, 
  getNotesByResourceId, 
  saveChat, 
  getChatByResourceId, 
  getChatsByResourceId,
  addChatMessage,
  deleteNote as deleteNoteFromStorage
} from "@/utils/storage";

import { VideoSection } from "@/components/video/VideoSection";
import { VideoSidebar } from "@/components/video/VideoSidebar";
import { TranscriptSegment } from "@/components/transcripts/TranscriptViewer";
import { generateTranscript, getTranscriptByVideoId } from "@/utils/transcriptService";
import { Header } from "@/components/layout/Header";
import { UrlInput } from "@/components/youtube/UrlInput";
import { useToast } from "@/hooks/use-toast";

// Mock video data for initial UI rendering
const mockVideoData = {
  id: "",
  title: "Sample Video Title",
  channelTitle: "Sample Channel",
  channelId: "",
  description: "This is a sample video description.",
  publishedAt: new Date().toISOString(),
  thumbnailUrl: "",
  duration: "10:30",
  viewCount: "1,000",
};

export default function VideoView() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [videoId, setVideoId] = useState(id || "");
  const [currentTime, setCurrentTime] = useState(0);
  const [videoData, setVideoData] = useState(mockVideoData);
  const [isCreatingNote, setIsCreatingNote] = useState(false);
  const [notes, setNotes] = useState<Note[]>([]);
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [transcript, setTranscript] = useState<TranscriptSegment[]>([]);
  const [isLoadingTranscript, setIsLoadingTranscript] = useState(false);

  // Load video data and notes
  useEffect(() => {
    if (!videoId) {
      navigate("/");
      return;
    }

    // Load video metadata from storage
    const storedVideo = getVideoMetadata(videoId);
    if (storedVideo) {
      setVideoData(storedVideo);
    } else {
      // If no stored metadata, use a placeholder with the correct ID
      setVideoData({
        ...mockVideoData,
        id: videoId,
        thumbnailUrl: `https://i.ytimg.com/vi/${videoId}/hqdefault.jpg`,
      });
    }

    // Load notes for this video
    const videoNotes = getNotesByResourceId(videoId);
    setNotes(videoNotes);

    // Load chat history for this video
    const videoChats = getChatsByResourceId(videoId);
    if (videoChats.length > 0) {
      // Use the most recent chat
      const latestChat = videoChats.sort((a, b) => b.updatedAt - a.updatedAt)[0];
      setMessages(latestChat.messages);
    }
  }, [videoId, navigate]);

  // Load transcript data
  useEffect(() => {
    if (!videoId) return;
    
    const loadTranscript = async () => {
      setIsLoadingTranscript(true);
      try {
        // Check if we have a cached transcript
        let videoTranscript = getTranscriptByVideoId(videoId);
        
        // If not, generate one
        if (!videoTranscript) {
          videoTranscript = await generateTranscript(videoId);
        }
        
        setTranscript(videoTranscript || []);
      } catch (error) {
        console.error("Error loading transcript:", error);
      } finally {
        setIsLoadingTranscript(false);
      }
    };
    
    loadTranscript();
  }, [videoId]);

  const handleSendMessage = (content: string) => {
    const userMessage: Message = {
      id: uuidv4(),
      content,
      role: "user",
      timestamp: Date.now(),
      videoTimestamp: createTimestamp(currentTime),
    };

    const updatedMessages = [...messages, userMessage];
    setMessages(updatedMessages);
    setIsLoading(true);

    // Simulate AI response
    setTimeout(() => {
      const aiMessage: Message = {
        id: uuidv4(),
        content: "This is a simulated AI response. In a real app, this would be generated by an AI service like OpenAI or Anthropic.",
        role: "assistant",
        timestamp: Date.now(),
      };
      
      const newMessages = [...updatedMessages, aiMessage];
      setMessages(newMessages);
      setIsLoading(false);

      // Save chat to storage
      const chatId = saveChat(videoId, `Chat about ${videoData.title}`);
      const chat = getChatByResourceId(videoId);
      
      if (chat) {
        newMessages.forEach(msg => {
          if (!chat.messages.some(m => m.id === msg.id)) {
            addChatMessage(chat.id, msg);
          }
        });
      }
    }, 1500);
  };

  const handleSaveNote = ({ title, content, richContent, videoTimestamp }: { 
    title: string;
    content: string;
    richContent?: string;
    videoTimestamp?: { seconds: number; formatted: string };
  }) => {
    const newNote = saveNote({
      resourceId: videoId,
      title,
      content,
      richContent,
      tags: [],
      videoTimestamp,
    });

    setNotes([...notes, newNote]);
    setIsCreatingNote(false);
    
    toast({
      title: "Note saved",
      description: "Your note has been saved successfully.",
    });
  };

  const handleDeleteNote = (noteId: string) => {
    deleteNoteFromStorage(noteId);
    setNotes(notes.filter((note) => note.id !== noteId));
    
    toast({
      title: "Note deleted",
      description: "Your note has been deleted.",
      variant: "destructive"
    });
  };

  const handleTimestampClick = (seconds: number) => {
    if (document.querySelector('iframe')) {
      // Access the YouTube iframe player
      const iframe = document.querySelector('iframe');
      const player = iframe?.contentWindow;
      
      // Send a postMessage to seek to the specified time
      player?.postMessage(JSON.stringify({
        event: 'command',
        func: 'seekTo',
        args: [seconds, true]
      }), '*');
    }
  };

  const handleUrlSubmit = (parseResult: { type: string; id: string; url: string }) => {
    if (parseResult.type === ResourceType.VIDEO) {
      navigate(`/video/${parseResult.id}`);
    } else if (parseResult.type === ResourceType.PLAYLIST) {
      navigate(`/playlist/${parseResult.id}`);
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      
      <div className="container py-6 px-4 sm:px-6 flex-grow">
        <div className="mb-4">
          <UrlInput onSubmit={handleUrlSubmit} />
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Video Player Section */}
          <VideoSection 
            videoId={videoId}
            videoData={videoData}
            currentTime={currentTime}
            onTimeUpdate={setCurrentTime}
            onSaveNote={handleSaveNote}
          />
          
          {/* Sidebar with Tabs */}
          <VideoSidebar 
            videoId={videoId}
            messages={messages}
            notes={notes}
            transcript={transcript}
            isLoading={isLoading}
            isLoadingTranscript={isLoadingTranscript}
            onSendMessage={handleSendMessage}
            onTimestampClick={handleTimestampClick}
            onDeleteNote={handleDeleteNote}
            onCreateNote={() => setIsCreatingNote(true)}
          />
        </div>
      </div>
    </div>
  );
}
